name: Weekly Account Validation

on:
  schedule:
    # Run every Sunday at 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  validate-accounts:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get all accounts
        id: get-accounts
        run: |
          echo "Getting all accounts from the data endpoint..."
          # The data endpoint requires the Bluesky password as part of the URL path
          ACCOUNTS=$(curl -s "https://verifiedbsky.net/admin/data/${{ secrets.BSKY_PASSWORD }}" | jq -r '.[].Value')
          echo "Found accounts: $ACCOUNTS"
          echo "accounts<<EOF" >> $GITHUB_OUTPUT
          echo "$ACCOUNTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate each account
        id: validate-accounts
        run: |
          echo "Starting validation of all accounts..."
          
          # Initialize failure tracking file
          temp_file="/tmp/failed_accounts.json"
          echo "[]" > $temp_file
          
          # Convert the accounts to a JSON array for easier processing
          accounts='${{ steps.get-accounts.outputs.accounts }}'

          # Remove duplicate accounts and sort them
          accounts=$(echo "$accounts" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          
          for handle in $accounts; do
            echo "Validating account: $handle"
            
            # Get current validation status for all modules (with authentication)
            validation_response=$(curl -s "https://verifiedbsky.net/weekly-validation/$handle/${{ secrets.BSKY_PASSWORD }}")
            echo "Validation response: $validation_response"
            
            # Parse the response and process each module
            echo "$validation_response" | jq -r '.moduleResults | to_entries[] | @base64' | while IFS= read -r module_data; do
              module_info=$(echo "$module_data" | base64 --decode)
              module_key=$(echo "$module_info" | jq -r '.key')
              is_valid=$(echo "$module_info" | jq -r '.value.isValid')
              current_failure_count=$(echo "$module_info" | jq -r '.value.failureCount')
              
              echo "Account $handle, Module $module_key - Valid: $is_valid, Current failures: $current_failure_count"
              
              if [ "$is_valid" = "true" ]; then
                # Module validation is valid, reset failure count to 0
                echo "Account $handle module $module_key is valid, resetting failure count to 0"
                curl -s -X POST "https://verifiedbsky.net/weekly-validation/${{ secrets.BSKY_PASSWORD }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"bskyHandle\": \"$handle\", \"moduleKey\": \"$module_key\", \"failureCount\": 0}"
              else
                # Module validation is invalid, increment failure count
                new_failure_count=$((current_failure_count + 1))
                echo "Account $handle module $module_key is invalid, incrementing failure count to $new_failure_count"
                
                response=$(curl -s -X POST "https://verifiedbsky.net/weekly-validation/${{ secrets.BSKY_PASSWORD }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"bskyHandle\": \"$handle\", \"moduleKey\": \"$module_key\", \"failureCount\": $new_failure_count}")
                
                echo "Update response: $response"
                
                # Track this failure for issue creation
                # Update the failures file with this account's failure info
                jq --arg handle "$handle" --arg module "$module_key" --argjson count "$new_failure_count" '
                  . as $root |
                  if any(.account == $handle) then
                    map(if .account == $handle then .modules += [{"module": $module, "failureCount": $count}] else . end)
                  else
                    . + [{"account": $handle, "modules": [{"module": $module, "failureCount": $count}]}]
                  end
                ' "$temp_file" > "${temp_file}.tmp" && mv "${temp_file}.tmp" "$temp_file"
                
                # Check if user was removed from this module
                action=$(echo "$response" | jq -r '.action')
                if [ "$action" = "partial_removal" ]; then
                  echo "‚ö†Ô∏è Account $handle was removed from module $module_key after the configured (MaxFailureCount) number of consecutive validation failures"
                else
                  echo "Account $handle module $module_key now has $new_failure_count consecutive failures"
                fi
              fi
              
              # Add a small delay between module checks to avoid rate limiting
              sleep 1
            done
            
            # Add a delay between accounts to avoid rate limiting
            sleep 2
          done
          
          # Output the failures for the next step
          failures_json=$(cat "$temp_file")
          echo "Failed accounts data: $failures_json"
          echo "failed-accounts<<EOF" >> $GITHUB_OUTPUT
          echo "$failures_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Weekly validation completed!"

      - name: Create issue for failed accounts
        if: steps.validate-accounts.outputs.failed-accounts != '[]' && steps.validate-accounts.outputs.failed-accounts != ''
        uses: actions/github-script@v7
        env:
          FAILED_ACCOUNTS_JSON: ${{ steps.validate-accounts.outputs.failed-accounts }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const failedAccounts = JSON.parse(process.env.FAILED_ACCOUNTS_JSON);
            
            if (failedAccounts.length === 0) {
              console.log('No failed accounts to report');
              return;
            }
            
            // Create the issue title and body
            const currentDate = new Date().toISOString().split('T')[0];
            const title = `Weekly Validation Failures - ${currentDate}`;
            
            let body = `# Weekly Account Validation Failures\n\n`;
            body += `**Date:** ${currentDate}\n\n`;
            body += `The following accounts failed validation during the weekly check:\n\n`;
            
            let totalFailures = 0;
            
            body += `| Account | Module | Failure Count |\n`;
            body += `|---------|--------|---------------|\n`;
            
            failedAccounts.forEach(account => {
              account.modules.forEach(module => {
                body += `| ${account.account} | ${module.module} | ${module.failureCount} |\n`;
                totalFailures++;
              });
            });
            
            body += `\n`;
            
            body += `## Summary\n\n`;
            body += `- **Total accounts with failures:** ${failedAccounts.length}\n`;
            body += `- **Total module failures:** ${totalFailures}\n\n`;
            body += `### Automated Actions\n\n`;
            body += `- ‚úÖ Failure counts have been automatically incremented\n`;
            body += `- üîÑ This issue was created automatically by the weekly validation workflow\n`;
            body += `- üìä Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed logs\n`;
            
            // Check if there's already an open issue for this week
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['weekly-validation', 'automated'],
              per_page: 10
            });
            
            const thisWeekIssue = existingIssues.data.find(issue => 
              issue.title.includes(currentDate)
            );
            
            if (thisWeekIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: thisWeekIssue.number,
                title: title,
                body: body
              });
              
              console.log(`Updated existing issue #${thisWeekIssue.number}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['weekly-validation', 'automated', 'bug']
              });
              
              console.log(`Created new issue #${issue.data.number}`);
            }

      - name: Summary
        run: |
          echo "## Weekly Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The weekly validation process has completed. Check the logs above for detailed results." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Process:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Retrieved all verified accounts from the data store" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Validated each account using their original verification method for each module" >> $GITHUB_STEP_SUMMARY
          echo "- üìä Updated failure counts based on validation results per module" >> $GITHUB_STEP_SUMMARY
          echo "- üö´ Removed accounts from specific modules that failed validation for the maximum number of consecutive times (MaxFailureCount)" >> $GITHUB_STEP_SUMMARY
